// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCommerceService.Database;

#nullable disable

namespace eCommerceService.Database.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    partial class ECommerceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eCommerceService.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Stockholm",
                            Country = "Sweden",
                            CreatedDate = new DateTime(2023, 10, 4, 23, 9, 49, 415, DateTimeKind.Local).AddTicks(6945),
                            Email = "john@hotmail.com",
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Abraham",
                            Phone = "12345678",
                            PostalCode = "0001",
                            StreetAddress = "Havreveien 50"
                        },
                        new
                        {
                            Id = 2,
                            City = "Oslo",
                            Country = "Norway",
                            CreatedDate = new DateTime(2023, 10, 4, 23, 9, 49, 415, DateTimeKind.Local).AddTicks(6948),
                            Email = "natasha@gmail.com",
                            FirstName = "Natasha",
                            IsActive = true,
                            LastName = "Kousar",
                            Phone = "12345678",
                            PostalCode = "0900",
                            StreetAddress = "Høvikveien 40"
                        },
                        new
                        {
                            Id = 3,
                            City = "Berlin",
                            Country = "Germany",
                            CreatedDate = new DateTime(2023, 10, 4, 23, 9, 49, 415, DateTimeKind.Local).AddTicks(6951),
                            Email = "marion@yahoomail.com",
                            FirstName = "Marion",
                            IsActive = true,
                            LastName = "Klintzing",
                            Phone = "12345678",
                            PostalCode = "0002",
                            StreetAddress = "Mortensrudveien 70"
                        });
                });

            modelBuilder.Entity("eCommerceService.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("eCommerceService.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("eCommerceService.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductCategory")
                        .HasColumnType("int");

                    b.Property<int>("ReservedQuantity")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableQuantity = 10,
                            CreatedDate = new DateTime(2023, 10, 4, 23, 9, 49, 415, DateTimeKind.Local).AddTicks(6837),
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            IsActive = true,
                            Name = "Oriental Bronze Chickend",
                            ProductCategory = 1,
                            ReservedQuantity = 0,
                            SKU = "SK001",
                            UnitPrice = 500m
                        },
                        new
                        {
                            Id = 2,
                            AvailableQuantity = 20,
                            CreatedDate = new DateTime(2023, 10, 4, 23, 9, 49, 415, DateTimeKind.Local).AddTicks(6868),
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends",
                            IsActive = true,
                            Name = "Gorgeous Plastic Sausages",
                            ProductCategory = 2,
                            ReservedQuantity = 0,
                            SKU = "SK002",
                            UnitPrice = 427m
                        },
                        new
                        {
                            Id = 3,
                            AvailableQuantity = 50,
                            CreatedDate = new DateTime(2023, 10, 4, 23, 9, 49, 415, DateTimeKind.Local).AddTicks(6870),
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            IsActive = true,
                            Name = "Intelligent Rubber Pizza",
                            ProductCategory = 3,
                            ReservedQuantity = 0,
                            SKU = "SK003",
                            UnitPrice = 200m
                        },
                        new
                        {
                            Id = 4,
                            AvailableQuantity = 100,
                            CreatedDate = new DateTime(2023, 10, 4, 23, 9, 49, 415, DateTimeKind.Local).AddTicks(6872),
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes",
                            IsActive = true,
                            Name = "Luxurious Cotton Gloves",
                            ProductCategory = 2,
                            ReservedQuantity = 0,
                            SKU = "SK004",
                            UnitPrice = 250m
                        },
                        new
                        {
                            Id = 5,
                            AvailableQuantity = 28,
                            CreatedDate = new DateTime(2023, 10, 4, 23, 9, 49, 415, DateTimeKind.Local).AddTicks(6874),
                            Description = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body",
                            IsActive = true,
                            Name = "Ergonomic Soft Tuna",
                            ProductCategory = 3,
                            ReservedQuantity = 0,
                            SKU = "SK005",
                            UnitPrice = 1000m
                        });
                });

            modelBuilder.Entity("eCommerceService.Entities.Order", b =>
                {
                    b.HasOne("eCommerceService.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("eCommerceService.Entities.OrderItem", b =>
                {
                    b.HasOne("eCommerceService.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("eCommerceService.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerceService.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("eCommerceService.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
